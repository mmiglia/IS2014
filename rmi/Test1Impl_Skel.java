// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package rmi;

public final class Test1Impl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("int contaChiamate()"),
	new java.rmi.server.Operation("void incrementa(rmi.IntHolder)"),
	new java.rmi.server.Operation("void metodo1()"),
	new java.rmi.server.Operation("int nonFunzionera()")
    };
    
    private static final long interfaceHash = -6165792355827836073L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	rmi.Test1Impl server = (rmi.Test1Impl) obj;
	switch (opnum) {
	case 0: // contaChiamate()
	{
	    call.releaseInputStream();
	    int $result = server.contaChiamate();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // incrementa(IntHolder)
	{
	    rmi.IntHolder $param_IntHolder_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_IntHolder_1 = (rmi.IntHolder) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.incrementa($param_IntHolder_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // metodo1()
	{
	    call.releaseInputStream();
	    server.metodo1();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // nonFunzionera()
	{
	    call.releaseInputStream();
	    int $result = server.nonFunzionera();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
